"""
Django settings for webapp_tracet project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "www.mwa-trigger.duckdns.org",
    "mwa-trigger.duckdns.org",
    "www.tracet.duckdns.org",
    "tracet.duckdns.org",
    "146.118.70.58",
    "web",
    "prop-api",
    "test-api",
]

# Remote broadcasters we subscribe to for VOEvents
# ["voevent.dc3.com", "chimefrb.physics.mcgill.ca"]
VOEVENT_REMOTES = []
# TCP connectiong we are whitelisting with to recieve VOEvents
# 196.44.140.214/32 - HESS
# 68.169.57.253 - GCN
# 50.116.49.68 - GCN
VOEVENT_TCP = ["41.63.245.86"]

# VOEvent comet filter (XPath 1.0)
# VOEVENT_COMET_FILTER = ['//*[contains(@ivorn, "HESS")]',
#                         '//*[contains(@ivorn, "Antares")]']

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_apscheduler",
    "django_filters",
    "trigger_app",
    "rest_framework",
    "django_extensions",
    "ninja_extra",
    "ninja_jwt",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "webapp_tracet.urls"

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "webapp_tracet.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Secret key and database defaults
# DB_SECRET_KEY = 'django-insecure-_cwc&r*gy2)kr=4jal7z2d#r9-i(ts3h_&+ob%1sj1sclzh4e_'
# SECRET_KEY = DB_SECRET_KEY
SECRET_KEY = os.environ.get("DB_SECRET_KEY", None)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static/"),)
STATIC_ROOT = os.path.join(BASE_DIR, "static_host/")

# Based on the SYSTEM_ENV decide if DEBUG should be on or off
# and override secret key and databases for github actions testing
SYSTEM_ENV = os.environ.get("SYSTEM_ENV", None)
if SYSTEM_ENV == "PRODUCTION" or SYSTEM_ENV == "STAGING":
    DEBUG = False
    CSRF_COOKIE_SECURE = True
    # STATIC_ROOT = os.path.join(BASE_DIR, "static_host/")
elif SYSTEM_ENV == "GITHUB_WORKFLOW":
    DEBUG = True
    SECRET_KEY = "TESTING_KEY"
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "github_actions",
            "USER": "postgres",
            "PASSWORD": "postgres",
            "HOST": "127.0.0.1",
            "PORT": "5432",
        }
    }
elif SYSTEM_ENV == "DEVELOPMENT":
    DEBUG = True

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_REDIRECT_URL = "/"

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Base url to serve media files
MEDIA_URL = "/media/"

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Set up email backend
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "mwa.trigger@gmail.com"
EMAIL_HOST_PASSWORD = os.getenv("GMAIL_APP_PASSWORD")

# Format string for displaying run time timestamps in the Django admin site. The default
# just adds seconds to the standard Django format, which is useful for displaying the timestamps
# for jobs that are scheduled to run on intervals of less than one minute.
#
# See https://docs.djangoproject.com/en/dev/ref/settings/#datetime-format for format string
# syntax details.
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# Maximum run time allowed for jobs that are triggered manually via the Django admin site, which
# prevents admin site HTTP requests from timing out.
#
# Longer running jobs should probably be handed over to a background task processing library
# that supports multiple background worker processes instead (e.g. Dramatiq, Celery, Django-RQ,
# etc. See: https://djangopackages.org/grids/g/workers-queues-tasks/ for popular options).
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# Django rest framework authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ]
}
# Logging config for webapp requests etc
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{thread:d} {asctime} \n{message}\n",
            "style": "{",
        },
        'json_formatter': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'fmt': '%(asctime)s %(name)s %(levelname)s %(message)s %(pathname)s %(lineno)d',
        },
    },
    "filters": {
        "event_create": {
            "()": "log_filters.EventCreateFilter",
        },
    },
    "handlers": {
        "debug-file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "formatter": "verbose",
            "filename": os.path.join(BASE_DIR, "logs/debug.log"),
        },
        "event_create-file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs/event_create.log"),
            "formatter": "verbose",
            "filters": ["event_create"],
        },
        'json_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, "logs/json_debug.log"),
            'formatter': 'json_formatter',
        },
    },
    "loggers": {
        "django": {
            "handlers": ["debug-file"],
            "level": "DEBUG",
            "propagate": True,
        },
        'django_json': {
            'handlers': ['json_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        "root": {
            "handlers": ["event_create-file"],
            "level": "INFO",
            "filters": ["event_create"],
            "propagate": True,
        },
    },
}


JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
AUTH_USERNAME = os.getenv("AUTH_USERNAME")
AUTH_PASSWORD = os.getenv("AUTH_PASSWORD")

NINJA_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365 * 2),
    "ALGORITHM": "HS256",  # Make sure both web and API use the same algorithm
    "SIGNING_KEY": JWT_SECRET_KEY,  # Shared secret key
    "VERIFYING_KEY": JWT_SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

WEB_APP_URL = os.getenv("WEB_APP_URL")
TRIGGER_API_URL = os.getenv("TRIGGER_API_URL")
LOGIC_API_URL = os.getenv("LOGIC_API_URL")
